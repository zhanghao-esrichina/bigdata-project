'''
NumPy 比一般的 Python 序列提供更多的索引方式。除了之前看到的用整数和切片的索引外，数组可以由整数数组索引、布尔索引及花式索引。


'''

import numpy as np

print("=====分别获取数组中(0,0)，(1,1)和(1,0)位置处的元素")
x = np.array([[1, 2], [3, 4], [5, 6]])
y = x[[0, 1, 1], [0, 1, 0]]  # 分别获取数组中(0,0)，(1,1)和(1,0)位置处的元素
print(y)


print("=====获取了 4X3 数组中的四个角的元素。 行索引是 [0,0] 和 [3,3]，而列索引是 [0,2] 和 [0,2] ")
x = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]])
print(x)
print('\n')

rows = np.array([[0, 0], [3, 3]])
cols = np.array([[0, 2], [0, 2]])
y = x[rows, cols]
print('这个数组的四个角元素是：')
# 返回的结果是包含每个角元素的 ndarray 对象。
print(y)


# 借助切片 : 或 … 与索引数组组合
print("=====借助切片 : 或 … 与索引数组组合")
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
b = a[1:3, 1:3]
c = a[1:3, [1, 2]]
d = a[..., 1:]
print(b)
print(c)
print(d)




# 布尔索引
# 通过布尔索引（如：比较运算符）来获取指定条件的元素的数组
print("=====实例获取大于 5 的元素：")
x = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11]])
print(x)
print('大于5的元素：')
print(x[x > 5])

print("=====使用了 ~（取补运算符）来过滤 NaN")
a = np.array([np.nan, 1, 2, np.nan, 3, 4, 5])

print(np.nan)
print(np.nanmax)
print(np.nanmin)
print(a[~np.isnan(a)])

'''
花式索引根据索引数组的值作为目标数组的某个轴的下标来取值。对于使用一维整型数组作为索引，如果目标是一维数组，那么索引的结果就是对应位置的
元素；如果目标是二维数组，那么就是对应下标的行。

花式索引跟切片不一样，它总是将数据复制到新数组中。
'''
print('=====花式索引')
x = np.arange(32).reshape((8, 4))
print(x)
print('打印4 2 1 7行')
print(x[[4, 2, 1, 7]])
